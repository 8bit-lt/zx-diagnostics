ZX Spectrum Diagnostics
=======================

By Brendan Alford
brendanalford@eircom.net

Original version by Dylan Smith
and archived at http://www.comportec.de/diag/www.alioth.net/Projects/Spectrum-Diag/


1.  INTRODUCTION

These diagnostics are intended to assist in the repairing of ZX Spectrum models,
especially 48K, 128K and Grey +2 models (Black +2 and +3 models have a comprehensive
built-in diagnostic).

They are designed for use with Dylan Smith's diagnostic board (described in the link above)
but can be utilised with any device that can replace the Spectrum's built in ROM with this 
image.

2.  HOW TO BUILD


The test tool is structured such that it can be built using the sjasmplus assembler.
Assuming sjasmplus is on your path, all that needs to be done is to run the build.bat 
batch file which will build the diagnostic firmware, which will be named 'testrom.bin'.
Testrom.sjasm is the project file for the assembler if modifications need to be made, 
in this case some familiarity with the tools must be assumed.


3.  HOW TO USE

Since there are many different hardware devices capable of providing the ability to replace
the Spectrum's ROM image with the diagnostic firmware, that process will not be outlined and is 
left as an exercise for the reader. To be fair, if you own any of these devices and are 
attempting a Spectrum repair, it's assumed you know what you are doing :)

Plug in the device containing the diagnostic firmware and power on the machine.

You should hear two distinct tones (and see a blue, then green border if the display is active) -
this confirms that the machine is running, at least the CPU and ULA are working and that there
are no issues with the address or data buses on the machine under test that prevent code execution.
If running with a Diagnostic Board (henceforth referred to as a DiagBoard), the eight LED's will 
light briefly then go out - this confirms that the DiagBoard I/O is working correctly.

The firmware will then execute some memory tests on the lower 16K of RAM which are described below.


3.1  LOWER RAM TESTING

As the lower RAM of a Spectrum is used for display, we cannot assume that the machine can produce
a correct display nor rely on it for output. Therefore lower RAM testing will produce some test patterns
on the display that exercise the RAM in various ways, and if a failure is found, will report the result
by way of a series of stripes in the border.

There will be eight of these stripes, representing bits 0 to 7 in downward order. These correspond to memory
IC's IC6 to IC13 (which are 4116 IC's) in that order. A green stripe indicates a healthy IC, and a red one 
that a fault was encountered. The computer will then halt.

If a DiagBoard is being used, then the LEDs will be lit to reflect failed memory IC's in the same pattern.

NOTE: If testing a 128K machine, these tests will by default exercise page 5 of RAM. In this case, the memory 
IC's corresponding to bits 0-7 are as follows:

 Bit  IC (128K)   IC (+2) 
+---+-----------+---------+
| 0 | IC6       | IC32    |
| 1 | IC7       | IC31    |
| 2 | IC8       | IC30    |
| 3 | IC9       | IC29    |
| 4 | IC10      | IC28    |
| 5 | IC11      | IC27    |
| 6 | IC12      | IC26    |
| 7 | IC13      | IC25    |
+---+-----------+---------+


3.2  FURTHER TESTS

If the lower RAM tests pass, then we have usable RAM in which to produce a display and store some workspace.
The machine will then clear to a white screen where results of further tests will be displayed.

If running on a DiagBoard, the firmware will try to identify the ROM on the computer by checksumming the
content. If this is successful, the firmware confirms the checksum and type on the screen, then proceeds
with testing appropriate to that machine.

If the firmware is being used on another device, or the ROM is corrupt, then this test will fail with 
the message 'Unknown ROM' and the user will be prompted to select the type of machine being tested.


3.3a  48K TESTS

The upper 32K of memory is then tested using the same test routines that were used for the lower 16K. 
Any failures for a particular test are noted, and the IC's responsible for the failure are displayed.


3.3b  128K TESTS

All memory banks are tested in turn by paging them in to the C000-FFFF address range, except bank 5 
which represents the lower 16K of memory on 128K machines. Failures are noted against each bank, and
again the IC's responsible for failure are displayed when testing is concluded.

Memory paging is also tested and is flagged if a failure is detected. This is almost always due to
a misdetection of a 48K machine as a 128K, or an issue with the HAL chip.


3.4  INTERRUPT TESTING

When memory testing is complete, the results are displayed and then an attempt is made to verify 
correct interrupt generation and handling. This is indicated by a message 'Testing interrupts...' 
accompanied by a (hopefully) increasing counter, and if running on a DiagBoard the LED's should 
be flashing in a pattern that reflects the LSB of the counter.


3.5  ROM PAGING (DiagBoard only)

When testing is complete, if running on a DiagBoard the machine will attempt to page in the Spectrum's
own ROM following a brief countdown. If successful, the machine should reset to BASIC as if the 
machine had been just powered on.


4.  OTHER FEATURES

4.1  TEST CARD

If the SPACE key is held down when the machine is powered on, following the initialisation tones a 
colour test card will be displayed, accompanied by a repeating tone. This is intended to facilitate 
tuning of VR1/VR2 pots on Issue 1 or 2 machines.

Holding down the Break key (or Caps Shift/Space) will reset to BASIC (on DiagBoard hardware) or 
restart the firmware (other devices).


4.2  SOAK TEST

If the 'S' key is held down when the machine is powered on, the firmware enters soak test mode 
(signified by a third high pitched tone immediately after the initialisation tones). This performs
repeated memory testing, looping back to the start after each successful test.

When testing upper RAM (48K) or 128K memory, soak test mode is indicated as a counter at the bottom
of the screen of the form 'Soak test: iteration xxxxx'. This may be used as a guide to how long soak 
testing has been running for.

All tests are executed identically and in the same order as in normal test mode, except for the
interrupt count test.

Following each successful test iteration, a message 'Soak test iteration complete' is displayed and
the firmware commences the next test iteration after a short delay.

If a lower RAM failure is detected, soak test mode is indicated by a narrow yellow border 
stripe at the bottom of the screen.

A failure detected during soak testing will halt testing (except where no upper memory is found 
working; this will be the case if testing a 16K Spectrum).

If the ROM checksum test fails (and therefore the machine type cannot be determined), the firmware 
assumes 48K hardware and continues testing as such.


4.3  ULA TEST

If the 'U' key is held down when the machine is powered on, following the initialisation tones the
ULA Test screen will be shown. This is a rudimentary facility to allow basic ULA functionality to
be verified.

The values read from Port 0xFE are displayed following the 'ULA READ' message, set bits are rendered
as white ink on black paper, reset bits as the inverse. Also, the value of the EAR bit (bit 6) is 
additionally displayed as if it were driving loading stripes, in a 3x2 block.

Pressing keys on the keyboard influences the values of bits 0-4 as you would expect, and allow the 
full keyboard to be verified.

Holding down the 1 key will output a tone via the MIC port of the ULA, accompanied by red/cyan stripes.
This can be used to verify tape saving output.

Holding down the 2 key will output a tone via the EAR port of the ULA, accompanied by blue/yellow
stripes. This can be used to verify speaker output (a little redundant perhaps)

Holding down the 3 key will output all possible colours as a rainbow border pattern, and to verify
that this functionality is operating successfully.

The machine will need to be reset or powered off to exit this mode.


5. TESTING DETAILS

There are four distinct types of memory test performed on each block of memory, these are described below.


5.1  WALK TEST

This is a very simple test - all it does is set each bit and reset each bit in memory, checking the memory 
holds the desired value on each iteration. If the test fails here, it means the failed RAM chip simply isn't
reliably (or at all) able to be set to a given value. This can be caused by a failed chip or a bad solder 
joint or broken PCB track. (When testing lower RAM, you can often see this once tests halt, 
by vertical lines 1 pixel wide running down the screen being visible)

This test will also show up failures in logic caused by data bus lines being shorted together.


5.2  INVERSION TEST

Many faulty chips can pass the first test sequence. This test looks for faults where setting or resetting 
a bit in memory causes another bit to erroneously be set or reset. The tests consist of setting all of the 
memory bank to zero, and then writing 1s in all even memory addresses, and then checking the pattern is
as expected. The test is run again - memory is blanked, then odd addresses are written to, and the 
pattern checked. Then, all of the ememory bank is set to 1, and even addresses are reset and tested. 
Finally, memory is all set to 1 again and odd addresses are reset and tested.

If the memory fails the inversion test, you can often get some insight into what is happening by watching
the screen if it's lower RAM that has failed (and if your Spectrum won't boot normally at all, this is 
highly likely). You should see alternating black and white vertical stripes appear on the screen. If a 
set of stripes is anything other than black or white, setting the bit in the failed memory likely sets 
the entire contents of the chip to that value. It's likely the row/column select circuitry in the failed
chip has a fault in that case. Other failures can be simply one or two adjacent bits getting flipped in
the wrong place. This may not be visible by the screen even if it's happened in lower RAM (the portion 
of RAM that the frame buffer occupies might be working fine). 


5.3  MARCH TEST

This test aims to shake out simple failures caused by addressing a memory location that causes adjacent
locations to be written erroneously. The algorithm used works as follows:

Step 1: Write 0 in ascending addressing order;
Step 2: Read 0 and write 255, again with ascending addressing order;
Step 3: Read 255 and write 0 with descending addressing order;
Step 4: read 0 with descending addressing order. 


5.4  RANDOM FILL TEST

There are some more subtle kinds of failure that the inversion or March test won't pick up, such as 
setting a memory bit in the faulty chip causing a bit to be set somewhere in the other half of the 
chip to be set. The random fill test tries to shake these out.

The routine uses a 16 bit pseudo random number generator to fill the memory bank with values, and 
then restarts the random number generator with the starting seed, and compares the output of the 
random number generator with what is held in memory. Memory is filled from bottom to top with one
pattern, verified, then top to bottom with another pattern and verified again.

When lower RAM is tested, you should see a scrambled pattern of random pixels and attributes 
on the screen.

Memory failures in this test are most likely problems with the chip's row/column select circuitry. 
For example, if the most significant bit gets stuck on for column access, setting a bit at location 
0 in the chip will also set location 8192 in the case of a 4116. 